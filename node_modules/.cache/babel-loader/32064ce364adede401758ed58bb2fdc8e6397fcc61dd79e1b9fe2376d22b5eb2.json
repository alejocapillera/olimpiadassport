{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      paso: 1,\n      sesionIniciada: false,\n      datosCliente: {\n        nombre: \"\",\n        email: \"\"\n      },\n      carrito: JSON.parse(localStorage.getItem(\"carrito\")) || [],\n      totalCarrito: JSON.parse(localStorage.getItem(\"totalCarrito\")) || 0,\n      metodo_pago_id: 1\n    };\n  },\n  methods: {\n    irAlSiguientePaso() {\n      this.paso = 2;\n    },\n    volverHome() {\n      this.$router.push({\n        name: \"home\"\n      });\n    },\n    async finalizarCompra() {\n      const token = localStorage.getItem(\"token\");\n      const id_cliente = localStorage.getItem(\"id_cliente\");\n      if (!token) {\n        alert(\"Por favor, inicie sesión para continuar.\");\n        return;\n      }\n      try {\n        const response = await axios.post(\"http://localhost:3001/api/auth/venta\", {\n          id_cliente: id_cliente,\n          productos: this.carrito.map(p => ({\n            id_producto: p.id_producto,\n            cantidad: p.cantidad,\n            precio_unitario: parseFloat(p.precio_unitario)\n          })),\n          total: parseFloat(this.totalCarrito),\n          metodo_pago_id: this.metodo_pago_id\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}` // Enviar el token como cadena\n          }\n        });\n        if (response.data.message === \"Venta registrada exitosamente\") {\n          alert(\"Compra finalizada con éxito.\");\n          localStorage.removeItem(\"carrito\");\n          localStorage.removeItem(\"totalCarrito\");\n          this.$router.push({\n            name: \"home\"\n          });\n        } else {\n          alert(\"Error al finalizar la compra.\");\n        }\n      } catch (error) {\n        console.error(\"Error al finalizar la compra:\", error);\n        alert(\"Error al finalizar la compra.\");\n      }\n    }\n  },\n  mounted() {\n    // Verificar si el usuario ha iniciado sesión\n    const id_cliente = localStorage.getItem(\"id_cliente\");\n    const nombre = localStorage.getItem(\"nombre\");\n    const email = localStorage.getItem(\"email\");\n\n    // Asignar los valores solo si están definidos\n    if (id_cliente) {\n      this.sesionIniciada = true;\n      this.datosCliente.nombre = nombre || \"\";\n      this.datosCliente.email = email || \"\";\n    } else {\n      // Asegurarse de que datosCliente siempre tiene valores por defecto\n      this.datosCliente.nombre = \"\";\n      this.datosCliente.email = \"\";\n    }\n\n    // Asegurar que el carrito y total estén sincronizados con el localStorage\n    if (!this.carrito.length) {\n      this.$router.push({\n        name: \"home\"\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","paso","sesionIniciada","datosCliente","nombre","email","carrito","JSON","parse","localStorage","getItem","totalCarrito","metodo_pago_id","methods","irAlSiguientePaso","volverHome","$router","push","name","finalizarCompra","token","id_cliente","alert","response","post","productos","map","p","id_producto","cantidad","precio_unitario","parseFloat","total","headers","Authorization","message","removeItem","error","console","mounted","length"],"sources":["C:\\Users\\estudiante\\Desktop\\sport-tienda\\src\\components\\MiCarrito.vue"],"sourcesContent":["<template>\n  <div class=\"mi-carrito\">\n    <h2>Finalizar Compra</h2>\n\n    <!-- Sección 1: Datos del usuario -->\n    <section v-if=\"paso === 1\">\n      <h3>Datos del Comprador</h3>\n      <form @submit.prevent=\"irAlSiguientePaso\">\n        <input\n          v-model=\"datosCliente.nombre\"\n          placeholder=\"Nombre\"\n          :readonly=\"sesionIniciada\"\n          required\n        />\n        <input\n          v-model=\"datosCliente.email\"\n          type=\"email\"\n          placeholder=\"Email\"\n          :readonly=\"sesionIniciada\"\n          required\n        />\n        <button type=\"submit\">Siguiente</button>\n        <button @click=\"volverHome\">Volver a la tienda</button>\n      </form>\n    </section>\n\n    <!-- Sección 2: Resumen del carrito y selección de método de pago -->\n    <section v-if=\"paso === 2\">\n      <h3>Resumen de tu compra</h3>\n      <ul>\n        <li v-for=\"(item, index) in carrito\" :key=\"index\">\n          {{ item.descripcion }} - ${{ item.precio_unitario }} x\n          {{ item.cantidad }}\n        </li>\n      </ul>\n      <p>Total: ${{ totalCarrito }}</p>\n\n      <h3>Selecciona el método de pago</h3>\n      <b-form-select v-model=\"metodo_pago_id\">\n        <b-form-select-option value=\"1\"\n          >Tarjeta de Crédito</b-form-select-option\n        >\n        <b-form-select-option value=\"2\">Mercadopago</b-form-select-option>\n        <b-form-select-option value=\"3\">Rapipago</b-form-select-option>\n      </b-form-select>\n\n      <button @click=\"finalizarCompra\">Finalizar Compra</button>\n    </section>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      paso: 1,\n      sesionIniciada: false,\n      datosCliente: {\n        nombre: \"\",\n        email: \"\",\n      },\n      carrito: JSON.parse(localStorage.getItem(\"carrito\")) || [],\n      totalCarrito: JSON.parse(localStorage.getItem(\"totalCarrito\")) || 0,\n      metodo_pago_id: 1,\n    };\n  },\n  methods: {\n    irAlSiguientePaso() {\n      this.paso = 2;\n    },\n    volverHome() {\n      this.$router.push({ name: \"home\" });\n    },\n    async finalizarCompra() {\n      const token = localStorage.getItem(\"token\");\n      const id_cliente = localStorage.getItem(\"id_cliente\");\n\n      if (!token) {\n        alert(\"Por favor, inicie sesión para continuar.\");\n        return;\n      }\n\n      try {\n        const response = await axios.post(\n          \"http://localhost:3001/api/auth/venta\",\n          {\n            id_cliente: id_cliente,\n            productos: this.carrito.map((p) => ({\n              id_producto: p.id_producto,\n              cantidad: p.cantidad,\n              precio_unitario: parseFloat(p.precio_unitario),\n            })),\n            total: parseFloat(this.totalCarrito),\n            metodo_pago_id: this.metodo_pago_id,\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${token}`, // Enviar el token como cadena\n            },\n          }\n        );\n\n        if (response.data.message === \"Venta registrada exitosamente\") {\n          alert(\"Compra finalizada con éxito.\");\n          localStorage.removeItem(\"carrito\");\n          localStorage.removeItem(\"totalCarrito\");\n          this.$router.push({ name: \"home\" });\n        } else {\n          alert(\"Error al finalizar la compra.\");\n        }\n      } catch (error) {\n        console.error(\"Error al finalizar la compra:\", error);\n        alert(\"Error al finalizar la compra.\");\n      }\n    },\n  },\n  mounted() {\n    // Verificar si el usuario ha iniciado sesión\n    const id_cliente = localStorage.getItem(\"id_cliente\");\n    const nombre = localStorage.getItem(\"nombre\");\n    const email = localStorage.getItem(\"email\");\n\n    // Asignar los valores solo si están definidos\n    if (id_cliente) {\n      this.sesionIniciada = true;\n      this.datosCliente.nombre = nombre || \"\";\n      this.datosCliente.email = email || \"\";\n    } else {\n      // Asegurarse de que datosCliente siempre tiene valores por defecto\n      this.datosCliente.nombre = \"\";\n      this.datosCliente.email = \"\";\n    }\n\n    // Asegurar que el carrito y total estén sincronizados con el localStorage\n    if (!this.carrito.length) {\n      this.$router.push({ name: \"home\" });\n    }\n  },\n};\n</script>\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}